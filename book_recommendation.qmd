---
title: "recommendation"
format: html
editor: visual
---

```{r loading libraries}
library(tidyverse)
library(janitor)
```

## Loading and Cleaning Data

```{r Loading files}
# url = "http://www2.informatik.uni-freiburg.de/~cziegler/BX/BX-CSV-Dump.zip"
# download.file(url, destfile = "data.zip")
# dir.create("data")
# unzip("data.zip",exdir = "data")   

files = paste0("data/",list.files("data"))

ratings = read.csv(files[1], sep = ";") %>% 
  clean_names()
books = read.csv(files[2], sep = ";") %>% 
  clean_names()
users = read.csv(files[3], sep = ";") %>% 
  clean_names()

# rm(files, url)
rm(files)
```



```{r adding categories}
set.seed(1234)
categories = c("Action and Adventure","Classic","Detective and Mystery","Fantasy")
books$category = sample( categories, nrow(books), replace=TRUE, prob=c(0.25, 0.3, 0.25, 0.20))
books$category = as.factor(books$category)

rm(categories)
```


```{r}
books$isbn = paste0("Isbn.",books$isbn)
users$user_id = paste0("User.",users$user_id)
ratings$isbn = paste0("Isbn.",ratings$isbn)
ratings$user_id = paste0("User.",ratings$user_id)
```


```{r}
ratings %>%
  group_by(book_rating) %>%
  summarize(cases = n()) %>%
  ggplot(aes(book_rating, cases)) + 
  geom_col() +
  theme_minimal() + 
  scale_x_continuous(breaks = 0:10) 
```

As we can see, there are a lot of zeros. This is a little weird, and it might indicate the absence of rating (a person has read the book but has not rate it). Thus, we will just get with the recommendations that are non-zero.

```{r}
ratings <- ratings %>% 
  filter(book_rating != 0)
```


```{r}
ratings %>%
  group_by(book_rating) %>%
  summarize(cases = n()) %>%
  ggplot(aes(book_rating, cases)) + 
  geom_col() +
  theme_minimal() + 
  scale_x_continuous(breaks = 0:10) 
```

```{r}
ratings_sum <- ratings %>%
  group_by(user_id) %>%
  count() 

summary(ratings_sum$n)
```



```{r}
user_index <- ratings_sum$user_id[ratings_sum$n>4]

users <- users[users$user_id %in% user_index, ]
ratings <- ratings[ratings$user_id %in% user_index, ]
books <- books[books$isbn %in% ratings$isbn,]

rm(ratings_sum, user_index)
```


## Content-Based Recommendation System

```{r}
library(cluster)
```


```{r}
books_distance <- books %>% 
  select(isbn, book_author, publisher) %>% 
  mutate(
    isbn = as.factor(isbn),
    book_author = as.factor(book_author),
    publisher = as.factor(publisher)
  )

# dissimilarity <- daisy(books_distance, metric = "gower")
```


```{r}
book_feature <- books[1:1000,c("book_author","publisher","category")]

book_feature[,1] <- as.factor(book_feature[,1])
book_feature[,2] <- as.factor(book_feature[,2])
book_feature[,3] <- as.factor(book_feature[,3])

dissimilarity = daisy(book_feature, metric = "gower", weights = c(2,0.5,1))
dissimilarity = as.matrix(dissimilarity)

rownames(dissimilarity) <-  books$isbn[1:1000]
colnames(dissimilarity) <- books$isbn[1:1000]

dissimilarity[15:20,15:20]
```


```{r}
user_id <- "User.1167"

user_books <- ratings %>%
  filter(user_id == user_id & isbn %in% books$isbn[1:1000]) %>%
  arrange(desc(book_rating))

head(user_books,10)
```


```{r}
books$isbn = as.character(books$isbn)
selected_books = user_books[ ,c("isbn", "book_rating")]

recomendar = function(selected_books, dissimilarity_matrix, 
                      books, n_recommendations = 5){

  selected_book_indexes = which(colnames(dissimilarity_matrix) %in% selected_books$isbn)


  results = data.frame(dissimilarity_matrix[, selected_book_indexes], 
                       recommended_book = row.names(dissimilarity_matrix),
                       stringsAsFactors = FALSE) 


  recommendations = results %>%
    pivot_longer(cols = c(-"recommended_book") , names_to = "read_book", 
                 values_to = "dissimilarity") %>%
      left_join(selected_books, by = c("recommended_book" = "isbn"))%>%
    arrange(desc(dissimilarity)) %>%
    filter(recommended_book != read_book) %>%
    filter(!is.na(book_rating) ) %>%
    mutate(
      similarity = 1 - dissimilarity,
      weighted_score = similarity * book_rating) %>%
    arrange(desc(weighted_score)) %>%
    filter(weighted_score>0) %>%
    group_by(recommended_book) %>% slice(1) %>%
    top_n(n_recommendations, weighted_score)  %>%
    left_join(books, by = c("recommended_book" = "isbn"))

  return(recommendations)
}

recommendations <- recomendar(selected_books, dissimilarity, books)
recommendations
```
























